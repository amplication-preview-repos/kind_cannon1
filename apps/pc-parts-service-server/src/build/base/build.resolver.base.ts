/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Build } from "./Build";
import { BuildCountArgs } from "./BuildCountArgs";
import { BuildFindManyArgs } from "./BuildFindManyArgs";
import { BuildFindUniqueArgs } from "./BuildFindUniqueArgs";
import { CreateBuildArgs } from "./CreateBuildArgs";
import { UpdateBuildArgs } from "./UpdateBuildArgs";
import { DeleteBuildArgs } from "./DeleteBuildArgs";
import { BuildPartFindManyArgs } from "../../buildPart/base/BuildPartFindManyArgs";
import { BuildPart } from "../../buildPart/base/BuildPart";
import { User } from "../../user/base/User";
import { BuildService } from "../build.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Build)
export class BuildResolverBase {
  constructor(
    protected readonly service: BuildService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Build",
    action: "read",
    possession: "any",
  })
  async _buildsMeta(
    @graphql.Args() args: BuildCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Build])
  @nestAccessControl.UseRoles({
    resource: "Build",
    action: "read",
    possession: "any",
  })
  async builds(@graphql.Args() args: BuildFindManyArgs): Promise<Build[]> {
    return this.service.builds(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Build, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Build",
    action: "read",
    possession: "own",
  })
  async build(
    @graphql.Args() args: BuildFindUniqueArgs
  ): Promise<Build | null> {
    const result = await this.service.build(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Build)
  @nestAccessControl.UseRoles({
    resource: "Build",
    action: "create",
    possession: "any",
  })
  async createBuild(@graphql.Args() args: CreateBuildArgs): Promise<Build> {
    return await this.service.createBuild({
      ...args,
      data: {
        ...args.data,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Build)
  @nestAccessControl.UseRoles({
    resource: "Build",
    action: "update",
    possession: "any",
  })
  async updateBuild(
    @graphql.Args() args: UpdateBuildArgs
  ): Promise<Build | null> {
    try {
      return await this.service.updateBuild({
        ...args,
        data: {
          ...args.data,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Build)
  @nestAccessControl.UseRoles({
    resource: "Build",
    action: "delete",
    possession: "any",
  })
  async deleteBuild(
    @graphql.Args() args: DeleteBuildArgs
  ): Promise<Build | null> {
    try {
      return await this.service.deleteBuild(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [BuildPart], { name: "buildParts" })
  @nestAccessControl.UseRoles({
    resource: "BuildPart",
    action: "read",
    possession: "any",
  })
  async findBuildParts(
    @graphql.Parent() parent: Build,
    @graphql.Args() args: BuildPartFindManyArgs
  ): Promise<BuildPart[]> {
    const results = await this.service.findBuildParts(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async getUser(@graphql.Parent() parent: Build): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
