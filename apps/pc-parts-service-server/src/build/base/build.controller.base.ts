/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { BuildService } from "../build.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { BuildCreateInput } from "./BuildCreateInput";
import { Build } from "./Build";
import { BuildFindManyArgs } from "./BuildFindManyArgs";
import { BuildWhereUniqueInput } from "./BuildWhereUniqueInput";
import { BuildUpdateInput } from "./BuildUpdateInput";
import { BuildPartFindManyArgs } from "../../buildPart/base/BuildPartFindManyArgs";
import { BuildPart } from "../../buildPart/base/BuildPart";
import { BuildPartWhereUniqueInput } from "../../buildPart/base/BuildPartWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class BuildControllerBase {
  constructor(
    protected readonly service: BuildService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Build })
  @nestAccessControl.UseRoles({
    resource: "Build",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createBuild(@common.Body() data: BuildCreateInput): Promise<Build> {
    return await this.service.createBuild({
      data: {
        ...data,

        user: data.user
          ? {
              connect: data.user,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        id: true,
        name: true,
        totalPrice: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Build] })
  @ApiNestedQuery(BuildFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Build",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async builds(@common.Req() request: Request): Promise<Build[]> {
    const args = plainToClass(BuildFindManyArgs, request.query);
    return this.service.builds({
      ...args,
      select: {
        createdAt: true,
        id: true,
        name: true,
        totalPrice: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Build })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Build",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async build(
    @common.Param() params: BuildWhereUniqueInput
  ): Promise<Build | null> {
    const result = await this.service.build({
      where: params,
      select: {
        createdAt: true,
        id: true,
        name: true,
        totalPrice: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Build })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Build",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateBuild(
    @common.Param() params: BuildWhereUniqueInput,
    @common.Body() data: BuildUpdateInput
  ): Promise<Build | null> {
    try {
      return await this.service.updateBuild({
        where: params,
        data: {
          ...data,

          user: data.user
            ? {
                connect: data.user,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          id: true,
          name: true,
          totalPrice: true,
          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Build })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Build",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteBuild(
    @common.Param() params: BuildWhereUniqueInput
  ): Promise<Build | null> {
    try {
      return await this.service.deleteBuild({
        where: params,
        select: {
          createdAt: true,
          id: true,
          name: true,
          totalPrice: true,
          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/buildParts")
  @ApiNestedQuery(BuildPartFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "BuildPart",
    action: "read",
    possession: "any",
  })
  async findBuildParts(
    @common.Req() request: Request,
    @common.Param() params: BuildWhereUniqueInput
  ): Promise<BuildPart[]> {
    const query = plainToClass(BuildPartFindManyArgs, request.query);
    const results = await this.service.findBuildParts(params.id, {
      ...query,
      select: {
        build: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,

        product: {
          select: {
            id: true,
          },
        },

        quantity: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/buildParts")
  @nestAccessControl.UseRoles({
    resource: "Build",
    action: "update",
    possession: "any",
  })
  async connectBuildParts(
    @common.Param() params: BuildWhereUniqueInput,
    @common.Body() body: BuildPartWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      buildParts: {
        connect: body,
      },
    };
    await this.service.updateBuild({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/buildParts")
  @nestAccessControl.UseRoles({
    resource: "Build",
    action: "update",
    possession: "any",
  })
  async updateBuildParts(
    @common.Param() params: BuildWhereUniqueInput,
    @common.Body() body: BuildPartWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      buildParts: {
        set: body,
      },
    };
    await this.service.updateBuild({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/buildParts")
  @nestAccessControl.UseRoles({
    resource: "Build",
    action: "update",
    possession: "any",
  })
  async disconnectBuildParts(
    @common.Param() params: BuildWhereUniqueInput,
    @common.Body() body: BuildPartWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      buildParts: {
        disconnect: body,
      },
    };
    await this.service.updateBuild({
      where: params,
      data,
      select: { id: true },
    });
  }
}
