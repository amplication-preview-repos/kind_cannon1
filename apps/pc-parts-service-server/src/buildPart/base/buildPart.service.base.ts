/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  BuildPart as PrismaBuildPart,
  Build as PrismaBuild,
  Product as PrismaProduct,
} from "@prisma/client";

export class BuildPartServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.BuildPartCountArgs, "select">
  ): Promise<number> {
    return this.prisma.buildPart.count(args);
  }

  async buildParts(
    args: Prisma.BuildPartFindManyArgs
  ): Promise<PrismaBuildPart[]> {
    return this.prisma.buildPart.findMany(args);
  }
  async buildPart(
    args: Prisma.BuildPartFindUniqueArgs
  ): Promise<PrismaBuildPart | null> {
    return this.prisma.buildPart.findUnique(args);
  }
  async createBuildPart(
    args: Prisma.BuildPartCreateArgs
  ): Promise<PrismaBuildPart> {
    return this.prisma.buildPart.create(args);
  }
  async updateBuildPart(
    args: Prisma.BuildPartUpdateArgs
  ): Promise<PrismaBuildPart> {
    return this.prisma.buildPart.update(args);
  }
  async deleteBuildPart(
    args: Prisma.BuildPartDeleteArgs
  ): Promise<PrismaBuildPart> {
    return this.prisma.buildPart.delete(args);
  }

  async getBuild(parentId: string): Promise<PrismaBuild | null> {
    return this.prisma.buildPart
      .findUnique({
        where: { id: parentId },
      })
      .build();
  }

  async getProduct(parentId: string): Promise<PrismaProduct | null> {
    return this.prisma.buildPart
      .findUnique({
        where: { id: parentId },
      })
      .product();
  }
}
